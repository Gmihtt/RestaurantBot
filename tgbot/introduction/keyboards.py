from typing import List

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from tgbot.config import main_admins, kitchens


def show_admin_menu(user_id: int):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–†–µ–∫–ª–∞–º–∞', callback_data="post"))
    markup.add(InlineKeyboardButton('–ú–µ—Å—Ç–∞', callback_data="place"))
    if user_id in main_admins:
        markup.add(InlineKeyboardButton('–ê–¥–º–∏–Ω—ã', callback_data="admin"))
        markup.add(InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data="statistics"))
    markup.add(InlineKeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é', callback_data="just_user"))
    return markup


def filters(vegan: bool, business: bool, hookah: bool):
    def checker(param: bool):
        if param:
            return "–î–ê"
        else:
            return "–ù–ï–¢"

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–†–µ–π—Ç–∏–Ω–≥ –∑–∞–≤–µ–¥–µ–Ω–∏—è', callback_data="rating"),
               InlineKeyboardButton('–í–µ–≥–∞–Ω—Å–∫–∏–µ: ' + checker(vegan), callback_data="vegan"),
               row_width=2)
    markup.add(InlineKeyboardButton('–ö—É—Ö–Ω—è', callback_data="chose_kitchens"),
               InlineKeyboardButton('–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á: ' + checker(business), callback_data="business"),
               row_width=2)
    markup.add(InlineKeyboardButton('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', callback_data="mid_price"),
               InlineKeyboardButton('–ö–∞–ª—å—è–Ω: ' + checker(hookah), callback_data="hookah"),
               row_width=2)
    markup.add(InlineKeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data="filters_drop"),
               InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É', callback_data="find_place"),
               InlineKeyboardButton('–í –º–µ–Ω—é', callback_data="main_menu"),
               row_width=1)
    return markup


def show_kitchens(pos: int):
    markup = InlineKeyboardMarkup()
    line = []
    list_kitchens = list(kitchens)[pos:pos + 10]
    for kitchen in list_kitchens:
        line.append(InlineKeyboardButton(kitchen, callback_data="name" + kitchen))
        if len(line) == 2:
            markup.add(*line, row_width=2)
            line = []
    if len(line) != 0:
        markup.add(*line, row_width=len(line))
    if 0 < pos < len(kitchens) - 10:
        markup.add(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data="back"),
                   InlineKeyboardButton('‚û°Ô∏è', callback_data="next"),
                   row_width=2)
    elif pos <= 0:
        markup.add(InlineKeyboardButton('‚û°Ô∏è', callback_data="next"), row_width=1)
    else:
        markup.add(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data="back"), row_width=1)
    markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', callback_data="filters", row_width=1))
    markup.add(InlineKeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', callback_data="drop", row_width=1))
    return markup


def main_menu(favorites: bool):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ', callback_data="find_place"), row_width=1)
    markup.add(InlineKeyboardButton('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', callback_data="filters"), row_width=1)
    if favorites:
        markup.add(InlineKeyboardButton('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data="favorites"), row_width=1)
    return markup


def mid_price():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–¥–æ 500‚ÇΩ', callback_data="price_500"),
               InlineKeyboardButton('–¥–æ 1000‚ÇΩ', callback_data="price_1000"),
               InlineKeyboardButton('–¥–æ 1500‚ÇΩ', callback_data="price_1500"),
               InlineKeyboardButton('–¥–æ 2000‚ÇΩ', callback_data="price_2000"),
               InlineKeyboardButton('–¥–æ 2500‚ÇΩ', callback_data="price_2500"),
               InlineKeyboardButton('–¥–æ 3500‚ÇΩ', callback_data="price_3500"),
               InlineKeyboardButton('–¥–æ 5000‚ÇΩ', callback_data="price_5000"),
               InlineKeyboardButton('–æ—Ç 5000‚ÇΩ', callback_data="price_5001"),
               row_width=1)
    markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', callback_data="filters", row_width=1))
    markup.add(InlineKeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', callback_data="drop", row_width=1))
    return markup


def rating():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–æ—Ç 3.0', callback_data="rating_3.0"),
               InlineKeyboardButton('–æ—Ç 3.5', callback_data="rating_3.5"),
               InlineKeyboardButton('–æ—Ç 4.0', callback_data="rating_4.0"),
               InlineKeyboardButton('–æ—Ç 4.5', callback_data="rating_4.5"),
               InlineKeyboardButton('–æ—Ç 4.7', callback_data="rating_4.7"),
               row_width=1)
    markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', callback_data="filters", row_width=1))
    markup.add(InlineKeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', callback_data="drop", row_width=1))
    return markup


def find_place():
    markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    button_geo = KeyboardButton(text="üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    markup.add(button_geo)
    return markup


def back_main_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–í –º–µ–Ω—é', callback_data="main_menu"), row_width=1)
    return markup


def drop_filters():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–î–∞', callback_data="drop_yes"),
               InlineKeyboardButton('–ù–µ—Ç', callback_data="drop_no"),
               row_width=1)
    return markup


def statistics():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤', callback_data="stat_all"),
               InlineKeyboardButton('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ —á–∞—Å', callback_data="stat_hour"),
               InlineKeyboardButton('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –¥–µ–Ω—å', callback_data="stat_day"),
               InlineKeyboardButton('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –Ω–µ–¥–µ–ª—é', callback_data="stat_week"),
               InlineKeyboardButton('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –º–µ—Å—è—Ü', callback_data="stat_month"),
               InlineKeyboardButton('deeplink', callback_data="deeplink"),
               row_width=1)
    markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å –≤ –º–µ–Ω—é', callback_data="admin_user"))
    return markup


def button_admin_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data="admin_user"),
               row_width=1)
    return markup


def show_admins_chose_buttons():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∞', callback_data="admin_user"),
               InlineKeyboardButton('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data="just_user"),
               row_width=1)
    return markup


def show_deeplink_stat(deeplinks: List[str], pos: int):
    markup = InlineKeyboardMarkup()
    line = []
    deeplinks = deeplinks[pos:pos + 10]
    for deeplink in deeplinks:
        line.append(InlineKeyboardButton(deeplink, callback_data="code" + deeplink))
        if len(line) == 2:
            markup.add(*line, row_width=2)
            line = []
    if len(line) != 0:
        markup.add(*line, row_width=len(line))
    if 0 < pos < len(kitchens) - 10:
        markup.add(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data="back"),
                   InlineKeyboardButton('‚û°Ô∏è', callback_data="next"),
                   row_width=2)
    elif pos <= 0:
        markup.add(InlineKeyboardButton('‚û°Ô∏è', callback_data="next"), row_width=1)
    else:
        markup.add(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data="back"), row_width=1)
    markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º', callback_data="statistics"))
    return markup
